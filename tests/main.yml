---
# Tasks for testing role

- name: run idempotence test
  hosts: localhost
  roles:
    - role: amtega.docker_presets
      docker_presets_images_json_query: >-
        [? starts_with(name, `centos-6`)
           || starts_with(name, `centos-7`)
           || starts_with(name, `fedora-27`)
           || starts_with(name, `fedora-28`) ]

    - role: amtega.docker_sandbox
      docker_sandbox_state: started
  tags:
    - sandbox

- name: prepare docker containers for test
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat
      tomcat_name: tomcat@server1
      tomcat_base: /srv/tomcat/tomcat@server1
      tomcat_version: 8.0.9

    - role: amtega.tomcat
      tomcat_name: tomcat@server2
      tomcat_base: /srv/tomcat/tomcat@server2
      tomcat_version: 8.0.9
      tomcat_use_native_daemon: false
      tomcat_server_port: 8006
      tomcat_server_http_port: 8081
      tomcat_server_https_port: 8444
      tomcat_server_ajp_port: 8010
  tasks:
    - name: download sample application
      get_url:
        url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
        dest: /tmp/sample2.war
        validate_certs: false
        timeout: 60
  tags:
    - prepare
    - idempotence

- name: test tomcat_application role application deploy
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat_application
  vars:
    mysql_datasource_template:
      name: >-
        {{ "jdbc/"
           + tomcat_application_name
           + "DS"
           + "%02d" | format(tomcat_application_datasource_index) }}
      auth: Container
      factory: org.apache.tomcat.jdbc.pool.DataSourceFactory
      type: javax.sql.DataSource
      driverClassName: com.mysql.jdbc.Driver
      # url: "jdbc:mysql://{{ tomcat_application_datasource.server }}"
      testWhileIdle: "false"
      testOnBorrow: "true"
      testOnReturn: "false"
      validationQuery: "SELECT 1 FROM DUAL"
      validationInterval: 30000
      timeBetweenEvictionRunsMillis: 30000
      minIdle: 0
      maxIdle: 30
      initialSize: 5
      maxActive: 100
      maxWait: 10000
      parameters: ['useSSL=false']

    tomcat_application_name: myapp
    tomcat_application_instances:
      - tomcat@server1
      - tomcat@server2
    tomcat_application_artifacts:
      - id: sample_war
        type: https
        host: https://tomcat.apache.org
        path: /tomcat-8.0-doc/appdev/sample
        file: sample.war
        dest: webapps
        timeout: 120
        validate_certs: no
      - id: release_notes
        type: https
        host: https://archive.apache.org
        path: /dist/tomcat/tomcat-8/v8.0.1
        file: RELEASE-NOTES
        dest: logs
        timeout: 120
        validate_certs: no
      - id: sample2_war
        type: http
        host: "file:"
        path: /tmp
        file: sample2.war
        dest: webapps
        timeout: 120
    tomcat_application_dirs:
      - "config/{{ tomcat_application_name }}"
      - "log/{{ tomcat_application_name }}"
      - "cert/{{ tomcat_application_name }}"
      - "data/{{ tomcat_application_name }}"
      - "resource/{{ tomcat_application_name }}"
    tomcat_application_datasources:
      - template: mysql_datasource_template
        server: mysql.acme.com
        user: app
        password: app_password

      - name: "jdbc/{{ tomcat_application_name }}DS02"
        auth: Container
        type: acme.jdbc.pool.AcmeDataSource
        factory: acme.jdbc.pool.AcmeDataSourceFactory
        driverClassName: acme.jdbc.AcmeDriver
        maxTotal: 100
        maxIdle: 30
        maxWaitMilli: 10000
        url: dbc:acme:@DATABASE
        user: app
        password: app_password
  tasks:
    - meta: flush_handlers

    - name: search application dirs
      stat:
        path: "{{ item.0.base }}/{{ item.1 }}"
      loop: >-
        {{ query('nested',
                 tomcat_application_server_instances,
                 tomcat_application_dirs) }}
      register: check_application_dirs_result
      loop_control:
        label: "{{ item.0.base }}/{{ item.1 }}"

    - name: check application dirs exist
      assert:
        that: item
      loop: >-
        {{ check_application_dirs_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check datasources config
      xml:
        path: "{{ item.0.base }}/conf/context.xml"
        xpath: "/Context/Resource[@name='{{ item.1.name }}']"
        content: attribute
      register: ds
      failed_when:
        ds.matches[0].Resource.name != item.1.name | string
        or ds.matches[0].Resource.auth != item.1.auth | string
        or ds.matches[0].Resource.type != item.1.type | string
        or ds.matches[0].Resource.factory != item.1.factory | string
        or ds.matches[0].Resource.driverClassName
           != item.1.driverClassName | string
        or ds.matches[0].Resource.maxTotal != item.1.maxTotal | string
        or ds.matches[0].Resource.maxIdle != item.1.maxIdle | string
        or ds.matches[0].Resource.maxWaitMilli != item.1.maxWaitMilli | string
        or ds.matches[0].Resource.url != item.1.url | string
        or ds.matches[0].Resource.user != item.1.user | string
        or ds.matches[0].Resource.password != item.1.password | string
      loop: >-
        {{ query('nested',
                 tomcat_application_server_instances,
                 tomcat_application_datasources) }}
      loop_control:
        label: "{{ item.0.name }} {{ item.1.name }}"

    - name: search application artifacts
      stat:
        path: "{{ item }}"
      loop:
        - /srv/tomcat/tomcat@server1/webapps/sample.war
        - /srv/tomcat/tomcat@server1/webapps/sample2.war
        - /srv/tomcat/tomcat@server2/webapps/sample.war
        - /srv/tomcat/tomcat@server2/webapps/sample2.war
      register: check_artifacts_result

    - name: check application artifacts exist
      assert:
        that: item
      loop: >-
        {{ check_artifacts_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check application is working
      uri:
        url: "{{ item }}"
        return_content: yes
      register: check_application_result
      failed_when: >-
         not check_application_result.content
             is search("Sample.*Hello.*World.*Application")
      until: check_application_result is success
      retries: 5
      delay: 5
      loop:
        - http://localhost:8080/sample
        - http://localhost:8080/sample2
        - http://localhost:8081/sample
        - http://localhost:8081/sample2
  tags:
    - idempotence

- name: test tomcat_application role application undeploy
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat_application
  vars:
      tomcat_application_name: myapp
      tomcat_application_instances:
        - tomcat@server1
        - tomcat@server2
      tomcat_application_artifacts:
        - id: sample_war
          type: https
          host: https://tomcat.apache.org
          path: /tomcat-8.0-doc/appdev/sample
          file: sample.war
          dest: webapps
          timeout: 120
          validate_certs: no
        - id: release_notes
          type: https
          host: https://archive.apache.org
          path: /dist/tomcat/tomcat-8/v8.0.1
          file: RELEASE-NOTES
          dest: logs
          timeout: 120
          validate_certs: no
        - id: sample2_war
          type: http
          host: "file:"
          path: /tmp
          file: sample2.war
          dest: webapps
          timeout: 120
      tomcat_application_dirs:
        - "config/{{ tomcat_application_name }}"
        - "log/{{ tomcat_application_name }}"
        - "cert/{{ tomcat_application_name }}"
        - "data/{{ tomcat_application_name }}"
        - "resource/{{ tomcat_application_name }}"
      tomcat_application_datasources:
        - name: "jdbc/{{ tomcat_application_name }}DS01"
          auth: Container
          type: acme.jdbc.pool.AcmeDataSource
          factory: acme.jdbc.pool.AcmeDataSourceFactory
          driverClassName: acme.jdbc.AcmeDriver
          maxTotal: 100
          maxIdle: 30
          maxWaitMilli: 10000
          url: dbc:acme:@DATABASE
          user: app
          password: app_password

        - name: "jdbc/{{ tomcat_application_name }}DS02"
          auth: Container
          type: acme.jdbc.pool.AcmeDataSource
          factory: acme.jdbc.pool.AcmeDataSourceFactory
          driverClassName: acme.jdbc.AcmeDriver
          maxTotal: 100
          maxIdle: 30
          maxWaitMilli: 10000
          url: dbc:acme:@DATABASE
          user: app
          password: app_password
      tomcat_application_state: absent
      tomcat_application_dirs_remove: true
  tasks:
    - meta: flush_handlers

    - name: search application dirs
      stat:
        path: "{{ item.0.base }}/{{ item.1 }}"
      loop: >-
        {{ query('nested',
                 tomcat_application_server_instances,
                 tomcat_application_dirs) }}
      register: check_application_dirs_result
      loop_control:
        label: "{{ item.0.base }}/{{ item.1 }}"

    - name: check application dirs does not exist
      assert:
        that: not item
      loop: >-
        {{ check_application_dirs_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check datasources config
      xml:
        path: "{{ item.0.base }}/conf/context.xml"
        xpath: "/Context/Resource[@name='{{ item.1.name }}']"
        content: attribute
      register: ds
      failed_when: ds.matches is defined
      loop: >-
        {{ query('nested',
                 tomcat_application_server_instances,
                 tomcat_application_datasources) }}
      loop_control:
        label: "{{ item.0.name }} {{ item.1.name }}"

    - name: search application artifacts
      stat:
        path: "{{ item }}"
      loop:
        - /srv/tomcat/tomcat@server1/webapps/sample.war
        - /srv/tomcat/tomcat@server1/webapps/sample2.war
        - /srv/tomcat/tomcat@server1/webapps/sample
        - /srv/tomcat/tomcat@server1/webapps/sample2
        - /srv/tomcat/tomcat@server2/webapps/sample.war
        - /srv/tomcat/tomcat@server2/webapps/sample2.war
        - /srv/tomcat/tomcat@server2/webapps/sample
        - /srv/tomcat/tomcat@server2/webapps/sample2
      register: check_application_artifacts_result

    - name: check application artifacts does not exist
      assert:
        that: not item
      loop: >-
        {{ check_application_artifacts_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check application is not working
      uri:
        url: "{{ item }}"
        return_content: yes
      register: check_application_result
      failed_when: >-
        check_application_result.content
             is search("Sample.*Hello.*World.*Application")
      loop:
        - http://localhost:8080/sample
        - http://localhost:8080/sample2
        - http://localhost:8081/sample
        - http://localhost:8081/sample2

- name: cleanup docker sandbox
  hosts: localhost
  roles:
    - role: amtega.docker_sandbox
      docker_sandbox_state: absent
  tags:
    - cleanup
    - sandbox
