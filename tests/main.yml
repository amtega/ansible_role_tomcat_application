---
# Tasks for testing role

- name: run idempotence test
  hosts: localhost
  roles:
    - role: amtega.docker_presets
      docker_presets_images_json_query: >-
        [? starts_with(name, `centos-6`)
           || starts_with(name, `centos-7`)
           || starts_with(name, `fedora-26`)
           || starts_with(name, `fedora-27`) ]

    - role: amtega.docker_sandbox
      docker_sandbox_state: started
  tags:
    - sandbox

- name: prepare docker containers for test
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat
  vars:
    tomcat_instances:
      - name: tomcat@server1
        version: 8.0.9
  tags:
      - sandbox

- name: test tomcat_application role
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat_application
  vars:
    tomcat_instances:
      - name: tomcat@server1
        version: 8.0.9
    tomcat_application_name: MyApp
    tomcat_application_instance: tomcat@server1
    tomcat_application_dirs:
      - "config/{{ tomcat_application_name }}"
      - "log/{{ tomcat_application_name }}"
      - "cert/{{ tomcat_application_name }}"
      - "data/{{ tomcat_application_name }}"
      - "resource/{{ tomcat_application_name }}"
    tomcat_application_datasources:
      - name: "jdbc/{{ tomcat_application_name }}DS"
        auth: Container
        type: acme.jdbc.pool.AcmeDataSource
        factory: acme.jdbc.pool.AcmeDataSourceFactory
        driverClassName: acme.jdbc.AcmeDriver
        maxTotal: 100
        maxIdle: 30
        maxWaitMilli: 10000
        url: dbc:acme:@DATABASE
        user: app
        password: app_password

  tasks:
    - name: search application dirs
      stat:
        path: "{{ instance.base}}/{{ item }}"
      loop: "{{ tomcat_application_dirs }}"
      register: check_application_dirs
      loop_control:
        label: "{{ instance.base}}/{{ item }}"
      vars:
        instance: >-
          {{ tomcat_application_server_instances[tomcat_application_instance] }}

    - name: check application dirs exist
      assert:
        that: item
      loop: >-
        {{ check_application_dirs.results
           | map(attribute='stat.exists')
           | list }}

    - name: read server config
      shell: >-
       cat {{ tomcat_application_server_instance.base }}/conf/server.xml
      register: server_config_result
      changed_when: false

    - name: check datasources config
      xml:
        path: "{{ tomcat_application_server_instance.base }}/conf/context.xml"
        xpath: >-
          /Context/Resource[@name='{{ item.name }}']
        content: attribute
      register: ds
      failed_when:
        ds.matches[0].Resource.name != item.name | string
        or ds.matches[0].Resource.auth != item.auth | string
        or ds.matches[0].Resource.type != item.type | string
        or ds.matches[0].Resource.factory != item.factory | string
        or ds.matches[0].Resource.driverClassName
           != item.driverClassName | string
        or ds.matches[0].Resource.maxTotal != item.maxTotal | string
        or ds.matches[0].Resource.maxIdle != item.maxIdle | string
        or ds.matches[0].Resource.maxWaitMilli != item.maxWaitMilli | string
        or ds.matches[0].Resource.url != item.url | string
        or ds.matches[0].Resource.user != item.user | string
        or ds.matches[0].Resource.password != item.password | string
      loop: "{{ tomcat_application_datasources }}"
      loop_control:
        label: "{{ item.name }}"
  tags:
    - idempotence

- name: cleanup docker docker sandbox
  hosts: localhost
  roles:
    - role: amtega.docker_sandbox
      docker_sandbox_state: absent
  tags:
    - sandbox
