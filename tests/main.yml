---
# Tasks for testing role

# FIXME: Check also sample application http visibility

- name: run idempotence test
  hosts: localhost
  roles:
    - role: amtega.docker_presets
      docker_presets_images_json_query: >-
        [? starts_with(name, `centos-6`)
           || starts_with(name, `centos-7`)
           || starts_with(name, `fedora-26`)
           || starts_with(name, `fedora-27`) ]

    - role: amtega.docker_sandbox
      docker_sandbox_state: started
  tags:
    - sandbox

- name: prepare docker containers for test
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat
  tasks:
    - name: configure tomcat application variables
      set_fact:
        tomcat_instances:
          - name: tomcat@server1
            version: 8.0.9

    - name: download sample application
      get_url:
        url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
        dest: /tmp
  tags:
    - prepare

- name: test tomcat_application role application deploy
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat_application
  vars:
    tomcat_application_name: MyApp
    tomcat_application_instance: tomcat@server1
    tomcat_application_artifacts:
      - url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
        dest: webapps
      - url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
        dest: webapps/sample2.war
      - url: file:///tmp/sample.war
        dest: webapps/sample3.war
    tomcat_application_dirs:
      - "config/{{ tomcat_application_name }}"
      - "log/{{ tomcat_application_name }}"
      - "cert/{{ tomcat_application_name }}"
      - "data/{{ tomcat_application_name }}"
      - "resource/{{ tomcat_application_name }}"
    tomcat_application_datasources:
      - name: "jdbc/{{ tomcat_application_name }}DS01"
        auth: Container
        type: acme.jdbc.pool.AcmeDataSource
        factory: acme.jdbc.pool.AcmeDataSourceFactory
        driverClassName: acme.jdbc.AcmeDriver
        maxTotal: 100
        maxIdle: 30
        maxWaitMilli: 10000
        url: dbc:acme:@DATABASE
        user: app
        password: app_password

      - name: "jdbc/{{ tomcat_application_name }}DS02"
        auth: Container
        type: acme.jdbc.pool.AcmeDataSource
        factory: acme.jdbc.pool.AcmeDataSourceFactory
        driverClassName: acme.jdbc.AcmeDriver
        maxTotal: 100
        maxIdle: 30
        maxWaitMilli: 10000
        url: dbc:acme:@DATABASE
        user: app
        password: app_password
  tasks:
    - name: search application dirs
      stat:
        path: "{{ tomcat_application_server_instance.base }}/{{ item }}"
      loop: "{{ tomcat_application_dirs }}"
      register: check_application_dirs_result
      loop_control:
        label: "{{ tomcat_application_server_instance.base }}/{{ item }}"

    - name: check application dirs exist
      assert:
        that: item
      loop: >-
        {{ check_application_dirs_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check datasources config
      xml:
        path: "{{ tomcat_application_server_instance.base }}/conf/context.xml"
        xpath: "/Context/Resource[@name='{{ item.name }}']"
        content: attribute
      register: ds
      failed_when:
        ds.matches[0].Resource.name != item.name | string
        or ds.matches[0].Resource.auth != item.auth | string
        or ds.matches[0].Resource.type != item.type | string
        or ds.matches[0].Resource.factory != item.factory | string
        or ds.matches[0].Resource.driverClassName
           != item.driverClassName | string
        or ds.matches[0].Resource.maxTotal != item.maxTotal | string
        or ds.matches[0].Resource.maxIdle != item.maxIdle | string
        or ds.matches[0].Resource.maxWaitMilli != item.maxWaitMilli | string
        or ds.matches[0].Resource.url != item.url | string
        or ds.matches[0].Resource.user != item.user | string
        or ds.matches[0].Resource.password != item.password | string
      loop: "{{ tomcat_application_datasources }}"
      loop_control:
        label: "{{ item.name }}"

    - name: search application artifacts
      stat:
        path: "{{ item }}"
      loop:
        - /srv/tomcat/tomcat@server1/webapps/sample.war
        - /srv/tomcat/tomcat@server1/webapps/sample2.war
        - /srv/tomcat/tomcat@server1/webapps/sample3.war
      register: check_artifacts_result

    - name: check application artifacts exist
      assert:
        that: item
      loop: >-
        {{ check_artifacts_result.results
           | map(attribute='stat.exists')
           | list }}
  tags:
    - idempotence

- name: test tomcat_application role application undeploy
  hosts: docker_sandbox_containers
  roles:
    - role: amtega.tomcat_application
  vars:
      tomcat_application_name: sample
      tomcat_application_instance: tomcat@server1
      tomcat_application_artifacts:
        - url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
          dest: webapps
        - url: https://tomcat.apache.org/tomcat-8.0-doc/appdev/sample/sample.war
          dest: webapps/sample2.war
        - url: file:///tmp/sample.war
          dest: webapps/sample3.war
      tomcat_application_dirs:
        - "config/{{ tomcat_application_name }}"
        - "log/{{ tomcat_application_name }}"
        - "cert/{{ tomcat_application_name }}"
        - "data/{{ tomcat_application_name }}"
        - "resource/{{ tomcat_application_name }}"
      tomcat_application_datasources:
        - name: "jdbc/{{ tomcat_application_name }}DS"
      tomcat_application_state: absent
      tomcat_application_dirs_remove: true
  tasks:
    - name: search application dirs
      stat:
        path: "{{ tomcat_application_server_instance.base }}/{{ item }}"
      loop: "{{ tomcat_application_dirs }}"
      register: check_application_dirs_result
      loop_control:
        label: "{{ tomcat_application_server_instance.base }}/{{ item }}"

    - name: check application dirs does not exist
      assert:
        that: not item
      loop: >-
        {{ check_application_dirs_result.results
           | map(attribute='stat.exists')
           | list }}

    - name: check datasources config
      xml:
        path: "{{ tomcat_application_server_instance.base }}/conf/context.xml"
        xpath: "/Context/Resource[@name='{{ item.name }}']"
        content: attribute
      register: ds
      failed_when: ds.matches is defined
      loop: "{{ tomcat_application_datasources }}"
      loop_control:
        label: "{{ item.name }}"

    - name: search application artifacts
      stat:
        path: "{{ item }}"
      loop:
        - /srv/tomcat/tomcat@server1/webapps/sample.war
        - /srv/tomcat/tomcat@server1/webapps/sample2.war
        - /srv/tomcat/tomcat@server1/webapps/sample3.war
        - /srv/tomcat/tomcat@server1/webapps/sample
        - /srv/tomcat/tomcat@server1/webapps/sample2
        - /srv/tomcat/tomcat@server1/webapps/sample3
      register: check_application_artifacts_result

    - name: check application artifacts does not exist
      assert:
        that: not item
      loop: >-
        {{ check_application_artifacts_result.results
           | map(attribute='stat.exists')
           | list }}

- name: cleanup docker docker sandbox
  hosts: localhost
  roles:
    - role: amtega.docker_sandbox
      docker_sandbox_state: absent
  tags:
    - sandbox
